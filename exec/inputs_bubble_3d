! WARNING: gfortran has shown some issues reading matrices of rank higher than 2 from namelists
! be careful and check values are read correctly (e.g., c_bc)

! Options for low Mach equations
&probin_common
 
  ! Problem specification
  !----------------------
  dim_in = 3                       ! 2D or 3D  
  prob_lo(1:3) = 0.d0 0.d0 0.d0    ! physical lo coordinate
  prob_hi(1:3) = 1.d0 1.d0 1.d0    ! physical hi coordinate

  chk_int = 80

  max_grid_size(1:3) = 64 64 64
  n_cells(1:3) = 256 256 256 ! number of cells in domain
  fixed_dt = 0.0015625d0     ! time step
  plot_int = 640             ! Interval for writing a plotfile (for visit/amrvis)
  max_step = 640             ! maximum number of time steps

  max_grid_size(1:3) = 32 32 32
  n_cells(1:3) = 128 128 128 ! number of cells in domain
  fixed_dt = 0.003125d0       ! time step
  plot_int = 320             ! Interval for writing a plotfile (for visit/amrvis)
  max_step = 320             ! maximum number of time steps

  max_grid_size(1:3) = 32 32 32
  n_cells(1:3) = 64 64 64  ! number of cells in domain
  fixed_dt = 0.00625d0     ! time step
  plot_int = 160           ! Interval for writing a plotfile (for visit/amrvis)
  max_step = 160           ! maximum number of time steps

  max_grid_size(1:3) = 16 16 16
  n_cells(1:3) = 32 32 32  ! number of cells in domain
  fixed_dt = 0.0125d0      ! time step
  plot_int = 80            ! Interval for writing a plotfile (for visit/amrvis)
  max_step = 80            ! maximum number of time steps

  ! Controls for number of steps between actions (for HydroGrid see below)
  !----------------------
  prob_type = -12                  ! sets scalars, m, coefficients (see init.f90)
  print_int = 1                    ! how often to output EOS drift and sum of conserved quantities
  project_eos_int = 1000           ! how often to call project_onto_eos

  ! Physical parameters
  !--------------------
  grav(1:3) = 0.d0 -1.d0 0.d0          ! gravity vector (negative is downwards)
  molmass(1:3) = 2.d0 1.d0 3.d0        ! molecular masses for nspecies (mass per molecule, *not* molar mass)
  rhobar(1:3) = 3.d0 2.d0 1.d0         ! pure component densities for all species

  ! stochastic forcing amplitudes (1 for physical values, 0 to run them off)
  variance_coef_mom = 0.d0  ! global scaling epsilon for stochastic momentum forcing
  variance_coef_mass = 0.d0 ! global scaling epsilon for stochastic mass forcing
  k_B = 1.d0            ! Boltzmann's constant

  ! Algorithm control / selection
  !----------------------
  algorithm_type = 0     ! differs from code to code.  In binary and multispcies code:
                         ! 0 = Inertial algorithm
                         ! 1 = Overdamped with 1 RNG
                         ! 2 = Overdamped with 2 RNGs

  ! Viscous friction L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  ! positive = assume constant coefficients
  ! negative = assume spatially-varying coefficients
  visc_type = -2
  visc_coef = 1.d-1        ! momentum diffusion coefficient 'eta'   

  advection_type = 0 ! 0 = centered explicit
                     ! 1 = unlimited bilinear bds in space and time
                     ! 2 = limited bliniear bds in space and time
                     ! 3 = unlimited quadratic bds in space and time
                     ! 4 = limited quadratic bds in space and time

  ! Boundary conditions
  !----------------------
  ! BC specifications:
  ! -1 = periodic
  ! 100 = no-slip wall      (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 101 = no-slip reservoir (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 200 = slip wall         (Dir condition for normal vel; Dir traction condition for trans vel)
  ! 201 = slip reservoir    (Dir condition for normal vel; Dir traction condition for trans vel)
  ! For a complete list see bc.f90
  bc_lo(1:3) = 100 100 100
  bc_hi(1:3) = 100 100 100

  ! set the x-vel and z-vel on the lo and hi-y faces
  wallspeed_lo(1:2,2) = -1.d0 -1.d0
  wallspeed_hi(1:2,2) = 1.d0 1.d0


/

&probin_multispecies

  ! Physical properties:
  !----------------------
  nspecies = 3
  fraction_tolerance = 1.d-12 ! For roundoff errors in mass and mole fractions
  start_time = 0.d0

  inverse_type = 1       ! Only for LAPACK:  1=inverse, 2=pseudo inverse
  timeinteg_type = 1
  correct_flux = T       ! Manually ensure mass is conserved to roundoff 
  print_error_norms = T
  is_ideal_mixture = T   ! If T assume Gamma=I (H=0) and simplify
  is_nonisothermal = T   ! If T Soret effect will be included
  use_lapack = F         ! Use LAPACK or iterative method for diffusion matrix (recommend False)
  
  ! Initial and boundary conditions 
  !----------------------
  T_init(1:2) = 1.d0 1.d0  ! initial values for temperature (bottom/top, inside/outside circle, etc.)
  temp_type = 0 ! for initializing temperature

  ! initial values for c
  c_init(1,1:3) = 0.5d0 0.5d0 0.0d0
  c_init(2,1:3) = 0.d0  0.d0  1.d0
  
  ! Thermodynamic and transport properties:
  !----------------------

  ! These are lower-triangules of symmetric matrices represented as vectors
  ! Number of elements is (nspecies*(nspecies-1)/2)
  ! The values are red row by row starting from top going down
  ! (this allows easy addition/deletion of new species/rows)
  ! So D_12; D_13, D_23; D_14, D_24, D_34; ...
  Dbar(1:3) = 1.d-4 5.d-4 1.d-3   ! Maxwell-Stefan diffusion constant  
  Dtherm(1:3) = 0.d0 0.d0 0.d0 ! thermo-diffusion coefficients, only differences among elements matter
  H_offdiag(1:3) = 0.d0        ! Off diagonal elements of H=d^2F/dx^2  
  H_diag(1:3) = 0.d0           ! Diagonal of H=d^2F/dx^2, these are vectors of length nspecies
  
  plot_stag = T                ! print mac velocities in separate staggered plotfile
 
/

! Stokes solver for velocity
&probin_gmres

  ! preconditioner type
  ! 1 = projection preconditioner
  !-1 = projection preconditioner with expensive pressure update
  ! 2 = lower triangular preconditioner
  !-2 = lower triangular preconditioner with negative sign
  ! 3 = upper triangular preconditioner
  !-3 = upper triangular preconditioner with negative sign
  ! 4 = Block diagonal preconditioner
  !-4 = Block diagonal preconditioner with negative sign
  precon_type = 1

  ! weighting of pressure when computing norms and inner products
  p_norm_weight = 1.d0

  ! scale theta_alpha, beta, gamma, and b_u by this, and then scale x_p by the inverse
  scale_factor = 1.d0

  ! MAC projection solver parameters:
  mg_verbose = 0        ! multigrid verbosity
  cg_verbose = 0        ! BiCGStab (mg_bottom_solver=1) verbosity
  mg_max_vcycles = 1    ! maximum number of V-cycles
  mg_minwidth = 2       ! length of box at coarsest multigrid level
  mg_bottom_solver = 4  ! bottom solver type
                        ! 0 = smooths only, controlled by mg_nsmooths_bottom
                        ! 1 = BiCGStab
                        ! 4 = Fancy bottom solve that coarsens down additionally
                        !     and then applies mg_nsmooths_bottom smooths
  mg_nsmooths_down = 2       ! number of smooths at each level on the way down
  mg_nsmooths_up = 2         ! number of smooths at each level on the way up
  mg_nsmooths_bottom = 8     ! number of smooths at the bottom (only if mg_bottom_solver=0)
  mg_max_bottom_nlevels = 10 ! for mg_bottom_solver=4, number of additional levels of multigrid
  mg_rel_tol = 1.d-9         ! relative tolerance stopping criteria

  ! Staggered multigrid solver parameters
  stag_mg_verbosity = 0       ! verbosity (set to 1 for debugging the gmres solver!)
  stag_mg_max_vcycles = 1     ! max number of v-cycles
  stag_mg_minwidth = 2        ! length of box at coarsest multigrid level
  stag_mg_bottom_solver = 4   ! bottom solver type
                              ! 0 = smooths only, controlled by mg_nsmooths_bottom
                              ! 4 = Fancy bottom solve that coarsens additionally
                              !     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2   ! number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2     ! number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8 ! number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10 ! for stag_mg_bottom_solver=4, number of additional levels of multigrid
  stag_mg_omega = 1.d0        ! weighted-jacobi omega coefficient
  stag_mg_smoother = 1        ! 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.d-9     ! relative tolerance stopping criteria

  ! GMRES solver parameters
  gmres_rel_tol = 1.d-9 ! relative tolerance stopping criteria
  gmres_abs_tol = 0.d0  ! absolute tolerance stopping criteria
  gmres_verbose = 1     ! gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20  ! max number of outer iterations
  gmres_max_inner = 5   ! max number of inner iterations, or restart number
  gmres_max_iter = 100  ! max number of gmres iterations
  gmres_min_iter = 1    ! min number of gmres iterations

/
