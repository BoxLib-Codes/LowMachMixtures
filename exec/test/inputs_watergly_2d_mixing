&probin_common

  ! Problem specification
  !----------------------
  dim_in = 2                 ! 2D or 3D  
  
  ! True parameters:
  grav(1:2) = 0.0 -981.0   ! gravity vector (negative is downwards) = [0,-GRAVITY] in IBAMR

  ! Domain shape and size = CartesianGeometry in IBAMR
  prob_lo(1:2) = 0.d0 0.d0   ! physical lo coordinate = x_lo in IBAMR
  prob_hi(1:2) = 1.d0 0.5d0  ! physical hi coordinate = x_up in IBAMR
  n_cells(1:2) = 128 64      ! number of cells in domain = domain_boxes in IBAMR
  max_grid_size(1:2) = 64 32 ! max number of cells in a box for parallelization = largest_patch_size in IBAMR
                             ! Unlike IBAMR there is no automatic parallelization here -- user must specify box/patch shape manually
  
  restart = -1              ! If positive, restarts simulation from checkpoint file with this index
  max_step = 99999          ! maximum number of time steps = N_STEPS in IBAMR
  print_int = 100           ! how often to output EOS drift and sum of conserved quantities = N_STEPS_CHECK in IBAMR
!  project_eos_int = 10      ! how often to call project_onto_eos ! Not implemented yet

  ! For initial conditions that have a sharp jump:    
  smoothing_width = 0.5 ! How much to smooth the sharp jump in initial condition (in units of grid cells)

  ! Time stepping
  ! Due to gravitation-induced instability the time step here needs to be very small, ~0.01s (overdamped)
  ! Here dx = 1/128
  ! maximum velocity ~10^-4, so advective CFL ~ 10^-4
  ! diffusive CFL for momentum ~1.5 (but momentum diffusion is implicit so that's ok)
  ! diffusive CFL for mass ~0.005
  fixed_dt = 0.01        ! time step (old explicit method used 0.005) = DT in IBAMR
  plot_int = 10          ! Interval for writing a plotfile (for visit/amrvis) = N_STEPS_DUMP in IBAMR
  chk_int = 1000         ! If positive, how often to write a checkpoint (restart file)

  ! 9 = one fluid on top of another
     ! c_init(1) in lower half of domain (in y)
     ! c_init(2) in upper half  
  prob_type = -3  ! negative since we enforce low mach constraint by overwriting final rho_i

  ! random number seed
  ! 0        = unpredictable seed based on clock
  ! positive = fixed seed
  seed = 0 ! SEED in IBAMR (must be kept at zero for restarts!)

  ! Algorithm control / selection
  !----------------------
  algorithm_type = 2	  ! enable overdamped (infinite Sc) algorithm
                          ! 0 = Inertial algorithm
                          ! 1 = Overdamped with 1 RNG
                          ! 2 = Overdamped with 2 RNGs  
  
  ! L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  ! positive = assume constant coefficients
  ! negative = assume spatially-varying coefficients
  visc_type = -2
  visc_coef = 1.d-2               ! momentum diffusion coefficient 'eta' = MU in IBAMR

  ! True parameters:
  rhobar(1:2) = 1.29 1.0   ! rho1bar and rho2bar = both equal to RHO in IBAMR    

  ! molar mass of water and glycerol, [g/molecule]
  molmass(1:2) = 1.1781d-23 1.52923d-22

  advection_type = 0      ! 0 = centered, 1 = unlimited bds, 2 = limited bds

  ! Stochastic fluxes: Here only variance_coef_mom*k_B*temperature matters in the end
  variance_coef_mom = 1.0       ! global scaling epsilon for stochastic forcing = 1/DZ = 1/THICKNESS in IBAMR
  variance_coef_mass = 0.d0
  initial_variance = 0.d0   ! multiplicative factor for initial fluctuations (if negative, total momentum is set to zero)

  k_B = 1.38E-16 ! kT=4.045d-14  ! Boltzmann's constant
  filtering_width = 0        ! If positive the random numbers will be filtered to smooth out the fields
  stoch_stress_form = 1      ! 0=nonsymmetric (div(v)=0), 1=symmetric (no bulk)

  ! Boundary conditions
  !----------------------
  ! BC specifications:
  ! -1  = periodic
  ! no slip: Dirichlet velocity condition for normal; Dirichlet velocity condition for trans
  ! NO_SLIP_WALL        = 100 ! Neumann condition for concentration - SORET
  ! NO_SLIP_RESERVOIR   = 101 ! Dirichlet BC for concentration - WaterGlycerol mixing
  ! slip: Dirichlet velocity condition for normal; Dirichlet traction condition for trans
  !    SLIP_WALL        = 200 ! Same as no slip but may reduce finite-size effects
  !    SLIP_RESERVOIR   = 201 ! Same as no slip but may reduce finite-size effects
  bc_lo(1:2) = -1 100 ! BC for low/bottom walls = (a/b)coef_function_{0,2,4} in IBAMR
  bc_hi(1:2) = -1 100 ! BC for high/top walls   = (a/b)coef_function_{1,3,5} in IBAMR

  ! Each no-slip wall may be moving with a specified tangential 
  ! velocity along the tangential directions
  ! In 2D:
  ! wallspeed_lo/hi(1,1) - yvel on x-face
  ! wallspeed_lo/hi(1,2) - xvel on y-face
  wallspeed_lo(1,2) = 0.d0 ! V_BOTTOM in IBAMR
  wallspeed_hi(1,2) = 0.d0 ! V_TOP in IBAMR

  ! HydroGrid analysis code options:
  hydro_grid_int = 5         ! How often to call updateHydroGrid = N_STEPS_POST in IBAMR
                             ! 0 if never
                             ! negative for projectHydroGrid custom analysis = PROJECT_Y=TRUE in IBAMR
                             ! positive for updateHydroGrid = PROJECT_Y=FALSE in IBAMR
  project_dir = 2	     ! Projection direction (1=x, 2=y, 3=z) = Fixed at 2 in IBAMR
  	                     ! Meaning: 0=analyze 3D data only (no projection needed for HydroGrid, 
  	                     !          but still need projection if stats_int>0)
  	                     ! +dim=project along dim then analyze 2D only,
  	                     ! -dim=analyze 3D and then project along dim so we also analyze 2D data
  max_grid_projection = 32   ! parallelization parameter for analysis
  stats_int =  1000          ! Project grid for analysis and write hstat and vstat files
                             ! If positive, how often to compute mean and 
                             ! standard deviation over reduced dimensions = N_STEPS_SNAPSHOT in IBAMR
  n_steps_save_stats = 1000  ! How often to dump HydroGrid output files
                             ! If you set n_steps_save_stats=max_step a final output will be saved with name containing max_step
                             ! Otherwise the final output of HydroGrid will be saved without any number in the file names
  n_steps_skip = 0           ! How many steps to skip = N_STEPS_SKIP in IBAMR  
  analyze_conserved = F      ! Should we use conserved variables for the analysis (does not work well)
  center_snapshots = T       ! Should we use cell-centered momenta for the analysis (will smooth fluctuations)
  
/

&probin_multispecies
 
 nspecies = 2                     ! number of species
 fraction_tolerance = 1e-14       ! to prevent division by zero 
 start_time  = 0.0                ! start at t=1 to avoid NAN coming from rho_exact at t=0
 inverse_type = 1                 ! LAPACK inverse type: 1=inverse, 2=pseudo inverse 
 correct_flux = .true.            ! correct flux to numeric roundoff
 print_error_norms = .true.       ! check L1/L2/Linf norm 
 is_ideal_mixture  = .true.       ! false=Bdag*Gama, true=Bdag 
 is_nonisothermal  = .true.       ! true=include grad(T), false= no grad(T)  
 use_lapack  = .false.            ! false=iterative methods, true=inverse/pseudoinverse 
 Dbar(1)         = 1.d-5          ! SM diffusion constant arranged in lower-triangle
 Dtherm(1:2)     = 0.0 0.0        ! thermo-diffusion constant (sums to zero)
 T_init(1) = 293.d0

 ! there are CONCENTRATIONS
 c_init(1:2,1) = 0.331379046751d0 0.d0

 
/

&probin_gmres

  ! preconditioner type
  ! 1 = projection preconditioner
  !-1 = projection preconditioner with expensive pressure update
  ! 2 = lower triangular preconditioner
  !-2 = lower triangular preconditioner with negative sign
  ! 3 = upper triangular preconditioner
  !-3 = upper triangular preconditioner with negative sign
  ! 4 = Block diagonal preconditioner
  !-4 = Block diagonal preconditioner with negative sign
  precon_type = 2

  ! weighting of pressure when computing norms and inner products
  p_norm_weight = 1.d0

  ! MAC projection solver parameters:
  mg_verbose = 0               ! multigrid verbosity
  cg_verbose = 0               ! BiCGStab (mg_bottom_solver=1) verbosity
  mg_max_vcycles = 1           ! maximum number of V-cycles
  mg_minwidth = 2              ! length of box at coarsest multigrid level
  mg_bottom_solver = 4         ! bottom solver type
                               ! 0 = smooths only, controlled by mg_nsmooths_bottom
                               ! 1 = BiCGStab
                               ! 4 = Fancy bottom solve that coarsens down additionally
                               !     and then applies mg_nsmooths_bottom smooths
  mg_nsmooths_down = 2         ! number of smooths at each level on the way down
  mg_nsmooths_up = 2           ! number of smooths at each level on the way up
  mg_nsmooths_bottom = 8       ! number of smooths at the bottom (only if mg_bottom_solver=0)
  mg_max_bottom_nlevels = 10   ! for mg_bottom_solver=4, number of additional levels of multigrid
  mg_rel_tol = 1.d-9           ! relative tolerance stopping criteria

  ! Staggered multigrid solver parameters
  stag_mg_verbosity = 0        ! verbosity
  stag_mg_max_vcycles = 1      ! max number of v-cycles
  stag_mg_minwidth = 2         ! length of box at coarsest multigrid level
                               ! 0 = smooths only, controlled by mg_nsmooths_bottom
                               ! 4 = Fancy bottom solve that coarsens additionally
                               !     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_bottom_solver = 4    ! bottom solver type
                               ! 0 = smooths only, controlled by mg_nsmooths_bottom
                               ! 4 = Fancy bottom solve that coarsens additionally
                               !     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2    ! number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2      ! number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8  ! number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10 ! for stag_mg_bottom_solver=4, 
                                  ! number of additional levels of multigrid
  stag_mg_omega = 1.d0         ! weighted-jacobi omega coefficient
  stag_mg_smoother = 1         ! 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.d-9      ! relative tolerance stopping criteria

  ! GMRES solver parameters
  gmres_rel_tol = 1.d-9        ! relative tolerance stopping criteria
  gmres_abs_tol = 0.d0         ! absolute tolerance stopping criteria
  gmres_verbose = 1            ! gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20         ! max number of outer iterations
  gmres_max_inner = 5          ! max number of inner iterations, or restart number
  gmres_max_iter = 100         ! max number of gmres iterations
  gmres_min_iter = 1           ! min number of gmres iterations

/

!----------------------------------------
! HydroGrid analysis
!----------------------------------------
! Variables: 1=rho, 2=v_x, 3=v_y, 4=T, 5=c=rho1/rho, 6=1-c=rho2/rho

! FULL 2D grid = First hydroAnalysisOptions namelist in IBAMR
! This one will be ignored if project_dir>0 (useful in 3D)
!----------------------------------------
&hydroAnalysisOptions
! 2D full grid data

   staggeredVelocities = 0 ! Are velocities on a staggered grid or not

   outputFolder = "./"
   filePrefix = "WaterGly2DFull"

   axisToPrint = 2 ! 1=x, 2=y, 3=z axis
   periodic = F ! Is the system periodic along the y axes
   
   writeSnapshotVTK=F ! Save snapshots of the instantaneous fields

   ! Means file: column 1=y, 2=rho, 3=v_x, 4=v_y, 5=T, 6=c
   storeConserved = F ! Leave at F
   writeMeansVTK = F ! Write the means to a VTK file

   ! Variances
   writeVariancesVTK = F ! Should we save a VTK file
   nVariances = 0 ! How many co-variances to calculate and save
   variancePairs = ""
      ! species1 variable1 species2 variable2
   
   ! Static structure factors
   writeSpectrumVTK = F
   subtractMeanFT = F ! The means are trivial here so no need to estimate them
   writeAbsValue = F ! Only write absolute values of complex values to VTK file?
   writeTheory = -1 ! Also write: -1=Projections onto discrete modes, 0=Continuum theory, 1=MAC theory
   nStructureFactors = 0
   structureFactorPairs = ""

   ! Dynamic structure factors:
   nWavenumbers=0
   ! Shape (3,nWavenumbers):
   selectedWavenumbers=""
   nSavedSnapshots=1000
   
/

!----------------------------------------
! PROJECTION along y axes (depends on x only) = Second hydroAnalysisOptions namelist in IBAMR
&hydroAnalysisOptions
! 1D projection onto direction perpendicular to y axes

   staggeredVelocities = 0 ! Are velocities on a staggered grid or not, (0, +1, or -1)*h/2

   outputFolder = "./"
   filePrefix = "WaterGly2DProj"

   writeSnapshotVTK = F ! Save snapshots of the instantaneous fields

   ! Means file:
   ! 1=y, 2=rho, 3-5=v, 6=T, 7=c in 3D
   ! 1=y, 2=rho, 3-4=v, 5=T, 6=c in 2D

   ! Save the flow to a VTK file:
   storeConserved = F ! We are not using conserved variables here due to staggering
   writeMeansVTK = F ! Save the means over the averaging interval

   ! Variances
   writeVariancesVTK = F ! Should we save a VTK file
   nVariances = 1
   ! Variance file:
   ! 1=y, 2=c-c
   variancePairs = "0 5 0 5"
      ! species1 variable1 species2 variable2
   
   ! Static structure factors
   writeSpectrumVTK = F
   subtractMeanFT = F ! The means are trivial here so no need to estimate them
   writeAbsValue = T ! Only write absolute values of complex values to VTK file?
   writeTheory = -1 ! Write the theoretical prediction (-1=none, 0==continuum or 1=MAC)
   nStructureFactors = 1
   ! 1=c-c
   structureFactorPairs = "0 5 0 5"

   ! Dynamic structure factors:
   nWavenumbers=6
   ! Shape (2,nWavenumbers):
   selectedWavenumbers="1 0, 2 0, 4 0, 6 0, 8 0, 10 0"
   nSavedSnapshots=100
      
   axisToPrint = 1 ! 1=x, 2=y, 3=z axis
   periodic = T ! Is the system periodic along the y axes
/

! PROJECTION along x axes (depends on y only) = not in IBAMR
!----------------------------------------
&hydroAnalysisOptions
! 1D projection onto y axes, not really useful here

   staggeredVelocities = 0 ! Are velocities on a staggered grid or not

   outputFolder = "./"
   filePrefix = "WaterGly2DVert"

   axisToPrint = 1 ! 1=x, 2=y, 3=z axis
   periodic = T ! Is the system periodic along the y axes
   
   writeSnapshotVTK=F ! Save snapshots of the instantaneous fields

   ! Means file: column 1=y, 2=rho, 3=v_x, 4=v_y, 5=T, 6=c
   storeConserved = F ! Leave at F
   writeMeansVTK = F ! Write the means to a VTK file

   ! Variances
   writeVariancesVTK = F ! Should we save a VTK file
   nVariances = 0 ! How many co-variances to calculate and save
   variancePairs = ""
      ! species1 variable1 species2 variable2
   
   ! Static structure factors
   writeSpectrumVTK = F
   subtractMeanFT = F ! The means are trivial here so no need to estimate them
   writeAbsValue = F ! Only write absolute values of complex values to VTK file?
   writeTheory = -1 ! Also write: -1=Projections onto discrete modes, 0=Continuum theory, 1=MAC theory
   nStructureFactors = 0
   structureFactorPairs = ""

   ! Dynamic structure factors:
   nWavenumbers=0
   ! Shape (3,nWavenumbers):
   selectedWavenumbers=""
   nSavedSnapshots=1000
   
/

